<?php/** * author Cesky WEB s.r.o. * @component CWtags * @copyright Copyright (C) Pavel Stary, Cesky WEB s.r.o. extensions.cesky-web.eu * @license http://www.gnu.org/copyleft/gpl.html GNU General Public License version 2 or later; */defined('_JEXEC') or die;/** * Offers component helper. * * @package	Joomla.Administrator * @subpackage	com_cwtags * @since	1.6 */class OffersHelper{	/**	 * Gets a list of the actions that can be performed.	 *	 * @param	int		The category ID.	 *	 * @return	JObject	 * @since	1.6	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$assetName = 'com_cwtags';		$level = 'component';		//$actions = JAccess::getActionsFromFile('access.xml');		$actions = JAccess::getActions('com_cwtags', $level);		foreach ($actions as $action) {			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}		/**	 * Method to test whether a record can be added. Whether the user has inserted item.	 *	 * @param   integer  $idInquiries  ID of inquiries.	 *	 * @return  boolean  True if allowed to add the record.	 *	 * @since   1.6	 */	public static function getCanAddItem($idInquiries)	{		// Create a new query object.		$db = JFactory::getDbo();		//Jsem dodavatel a jsem ve skupine jako je aukce?		$query = $db->getQuery(true);		$query->select('DISTINCT(map.user_id)');		$query->from('#__categories as cat1');		$query->join('INNER', '#__categories AS cat2 ON cat2.lft >= cat1.lft AND cat1.rgt >= cat2.rgt');		$query->join('LEFT', '#__inquiries AS inq ON (inq.categories_id = cat1.id)');		$query->join('LEFT', '#__suppliers_categories_map AS map ON (cat2.id = map.category_id)');		$query->where('inq.id=' . $db->Quote($idInquiries).' AND map.user_id = '.(int)JFactory::getUser()->id);		$db->setQuery($query);		$dod = $db->loadResult();		if ($dod == NULL) {			return FALSE;		}				//Stav poptavky		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select('a.state')				->from($db->quoteName('#__inquiries').' AS a')				->where('a.id = '.(int)$idInquiries.' AND (NOW() BETWEEN a.term_auction_start AND a.term_auction_finish)');		$db->setQuery((string)$query);		$db->execute();		$result = $db->getNumRows();				if ($result == 0) {			return FALSE;		}				return TRUE;	}		/**	 * Method to add time to end.	 *	 * @param   integer  $idInquiries	ID of inquiries.	 * @param   integer  $timeBeforeEnd	Time nefore end.	 * @param   integer  $timeToAdd		Time to add in minutes.	 *	 * @return  boolean  True if allowed to add the record.	 *	 * @since   1.6	 */	public static function AddTimeToEnd($idInquiries, $timeBeforeEnd, $timeToAdd)	{		// Create a new query object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->update($db->quoteName('#__inquiries'))				->set('term_auction_finish = DATE_ADD(term_auction_finish, INTERVAL '.(int)$timeToAdd.' MINUTE)')				->where('id = '.(int)$idInquiries.' AND term_auction_finish < (DATE_ADD(NOW(), INTERVAL '.(int)$timeBeforeEnd.' MINUTE))');		$db->setQuery((string)$query);		$db->execute();				return TRUE;	}		/**	 * Function to convert a static time into a relative measurement	 *	 * @param   string  $date  The date to convert	 * @param   string  $unit  The optional unit of measurement to return	 *                         if the value of the diff is greater than one	 * @param   string  $time  An optional time to compare to, defaults to now	 *	 * @return  string  The converted time string	 *	 * @since   11.3	 */	public static function relative_fut($date, $unit = null, $time = null)	{		if (is_null($time))		{			// Get now			//$time = JFactory::getDate('now');			$time = new DateTime;			$time = $time->format('Y-m-d H:i:s');		}		// Get the difference in seconds between now and the time		$diff = strtotime($date) - strtotime($time);		// Less than a minute		if ($diff < 60)		{			return JText::_('COM_CWTAGSS_HTML_DATE_RELATIVE_MORETHANAMINUTE');		}		// Round to minutes		$diff = round($diff / 60);		// 1 to 59 minutes		if ($diff < 60 || $unit == 'minute')		{			return JText::plural('COM_CWTAGS_HTML_DATE_RELATIVE_MINUTES', $diff);		}		// Round to hours		$diff = round($diff / 60);		// 1 to 23 hours		if ($diff < 24 || $unit == 'hour')		{			return JText::plural('COM_CWTAGS_HTML_DATE_RELATIVE_HOURS', $diff);		}		// Round to days		$diff = round($diff / 24);		// 1 to 6 days		if ($diff < 7 || $unit == 'day')		{			return JText::plural('COM_CWTAGS_HTML_DATE_RELATIVE_DAYS', $diff);		}		// Round to weeks		$diff = round($diff / 7);		// 1 to 4 weeks		if ($diff <= 4 || $unit == 'week')		{			return JText::plural('COM_CWTAGS_HTML_DATE_RELATIVE_WEEKS', $diff);		}				// Round to months		$diff = round($diff / 4.3);		// 1 to 12 weeks		if ($diff <= 12 || $unit == 'month')		{			return JText::plural('COM_CWTAGS_HTML_DATE_RELATIVE_MONTHS', $diff);		}		// Over a month, return the absolute time		return JHtml::_('date', $date);	}}